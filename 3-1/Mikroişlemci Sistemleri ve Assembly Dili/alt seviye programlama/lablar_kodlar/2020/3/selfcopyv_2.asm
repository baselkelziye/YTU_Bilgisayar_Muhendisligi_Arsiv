;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Pzt Eki 7 2019
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================

CODE    SEGMENT PARA 'CODE'
        ASSUME CS:CODE, DS:DATA, SS:STAK
	
STAK    SEGMENT PARA STACK 'STACK'
        DW 20 DUP(?)
STAK    ENDS

DATA    SEGMENT PARA 'DATA'
DIGITS  DB 0C0H, 0F9H ;array definition
DATA    ENDS


START PROC


MOV AX, DATA
MOV DS, AX

;You may write one time jobs here
 xor ax,ax
 mov al,081h
 mov dx, 0afh
 out dx,al
 
 
MAINLOOP:

	mov cl,4
	start:
	
	
 tus_tara:
   mov al,040h
   out 0adh, al
   in al,0adh
   cmp al,040h
   jnz tus_369diyez
   
   mov al, 020h
   out 0adh, al
   in al, 0adh
   cmp al,020h
   jnz tus_2580
   
   mov al, 010h
   out 0adh, al
   in al, 0adh
   cmp al,010h
   jnz tus_147yildiz
   
   don_tara:
   jmp tus_tara
   
	
	tus_369diyez:
	clc 
	push bx
	xor bx,bx
	ara369diyez:
	dolan:
	rcr al,1
	inc bl
	jnc dolan
	
	
	
	;cmp al,041h
	;jz tus_3 
	;cmp al,042h
	;jz tus_6
	;cmp 044h

   tus_2580:
	tus_147yildiz:
	
	
	
	
LOOP start





   ;Write Your Code Here

   ;Example Procedure Call:
  PUSH AX ;Save Working Value
   CALL READ_FROM_ARRAY
   MOV BL, AL ;Move AL to BL (which temporarly contains value of DIGITS[SI])
   POP AX ;retrieve Working Value 
   
   CALL WAIT_A_LITTLE ;spend some time
   
   
   
JMP MAINLOOP


RET
START ENDP


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
READ_FROM_ARRAY PROC NEAR

MOV SI,0
MOV AL, DIGITS[SI]

RET
READ_FROM_ARRAY ENDP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WAIT_A_LITTLE PROC NEAR

;Remember to save previous values
;Looping to spend sometime

MOV CL, 00AH
LOOP1: LOOP LOOP1

RET
WAIT_A_LITTLE ENDP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


CODE    ENDS
        END START